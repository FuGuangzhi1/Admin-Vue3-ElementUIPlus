var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});

// node_modules/.pnpm/tsup@5.11.9_typescript@4.5.4/node_modules/tsup/assets/esm_shims.js
import { fileURLToPath } from "url";
import path from "path";
var getFilename = () => fileURLToPath(import.meta.url);
var getDirname = () => path.dirname(getFilename());
var __dirname = /* @__PURE__ */ getDirname();

// src/esbuild/index.ts
import fs from "fs";
import path2 from "path";

// src/esbuild/utils.ts
import { extname } from "path";

// node_modules/.pnpm/@ampproject+remapping@1.0.2/node_modules/@ampproject/remapping/dist/remapping.mjs
var charToInteger = {};
var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
for (i = 0; i < chars.length; i++) {
  charToInteger[chars.charCodeAt(i)] = i;
}
var i;
function decode(mappings) {
  var decoded = [];
  var line = [];
  var segment = [
    0,
    0,
    0,
    0,
    0
  ];
  var j = 0;
  for (var i = 0, shift = 0, value = 0; i < mappings.length; i++) {
    var c = mappings.charCodeAt(i);
    if (c === 44) {
      segmentify(line, segment, j);
      j = 0;
    } else if (c === 59) {
      segmentify(line, segment, j);
      j = 0;
      decoded.push(line);
      line = [];
      segment[0] = 0;
    } else {
      var integer = charToInteger[c];
      if (integer === void 0) {
        throw new Error("Invalid character (" + String.fromCharCode(c) + ")");
      }
      var hasContinuationBit = integer & 32;
      integer &= 31;
      value += integer << shift;
      if (hasContinuationBit) {
        shift += 5;
      } else {
        var shouldNegate = value & 1;
        value >>>= 1;
        if (shouldNegate) {
          value = value === 0 ? -2147483648 : -value;
        }
        segment[j] += value;
        j++;
        value = shift = 0;
      }
    }
  }
  segmentify(line, segment, j);
  decoded.push(line);
  return decoded;
}
function segmentify(line, segment, j) {
  if (j === 4)
    line.push([segment[0], segment[1], segment[2], segment[3]]);
  else if (j === 5)
    line.push([segment[0], segment[1], segment[2], segment[3], segment[4]]);
  else if (j === 1)
    line.push([segment[0]]);
}
function encode(decoded) {
  var sourceFileIndex = 0;
  var sourceCodeLine = 0;
  var sourceCodeColumn = 0;
  var nameIndex = 0;
  var mappings = "";
  for (var i = 0; i < decoded.length; i++) {
    var line = decoded[i];
    if (i > 0)
      mappings += ";";
    if (line.length === 0)
      continue;
    var generatedCodeColumn = 0;
    var lineMappings = [];
    for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {
      var segment = line_1[_i];
      var segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);
      generatedCodeColumn = segment[0];
      if (segment.length > 1) {
        segmentMappings += encodeInteger(segment[1] - sourceFileIndex) + encodeInteger(segment[2] - sourceCodeLine) + encodeInteger(segment[3] - sourceCodeColumn);
        sourceFileIndex = segment[1];
        sourceCodeLine = segment[2];
        sourceCodeColumn = segment[3];
      }
      if (segment.length === 5) {
        segmentMappings += encodeInteger(segment[4] - nameIndex);
        nameIndex = segment[4];
      }
      lineMappings.push(segmentMappings);
    }
    mappings += lineMappings.join(",");
  }
  return mappings;
}
function encodeInteger(num) {
  var result = "";
  num = num < 0 ? -num << 1 | 1 : num << 1;
  do {
    var clamped = num & 31;
    num >>>= 5;
    if (num > 0) {
      clamped |= 32;
    }
    result += chars[clamped];
  } while (num > 0);
  return result;
}
function defaults(target, source) {
  return Object.assign(Object.create(null), source, target);
}
function decodeSourceMap(map) {
  if (typeof map === "string") {
    map = JSON.parse(map);
  }
  let { mappings } = map;
  if (typeof mappings === "string") {
    mappings = sortMappings(decode(mappings), true);
  } else {
    mappings = sortMappings(mappings, false);
  }
  return defaults({ mappings }, map);
}
function firstUnsortedSegmentLine(mappings) {
  for (let i = 0; i < mappings.length; i++) {
    const segments = mappings[i];
    for (let j = 1; j < segments.length; j++) {
      if (segments[j][0] < segments[j - 1][0]) {
        return i;
      }
    }
  }
  return mappings.length;
}
function sortMappings(mappings, owned) {
  const unosrtedIndex = firstUnsortedSegmentLine(mappings);
  if (unosrtedIndex === mappings.length)
    return mappings;
  if (!owned)
    mappings = mappings.slice();
  for (let i = unosrtedIndex; i < mappings.length; i++) {
    mappings[i] = sortSegments(mappings[i], owned);
  }
  return mappings;
}
function sortSegments(segments, owned) {
  if (!owned)
    segments = segments.slice();
  return segments.sort(segmentComparator);
}
function segmentComparator(a, b) {
  return a[0] - b[0];
}
var OriginalSource = class {
  constructor(filename, content) {
    this.filename = filename;
    this.content = content;
  }
  traceSegment(line, column, name) {
    return { column, line, name, source: this };
  }
};
var Url = typeof URL !== "undefined" ? URL : __require("url").URL;
var parentRegex = /(^|\/)\.\.(?=\/|$)/g;
function isAbsoluteUrl(url) {
  try {
    return !!new Url(url);
  } catch (e) {
    return false;
  }
}
function uniqInStr(str) {
  let uniq = String(Math.random()).slice(2);
  while (str.indexOf(uniq) > -1) {
    uniq += uniq;
  }
  return uniq;
}
function stripPathFilename(path3) {
  path3 = normalizePath(path3);
  const index = path3.lastIndexOf("/");
  return path3.slice(0, index + 1);
}
function normalizeProtocolRelative(input, absoluteBase) {
  const { href, protocol } = new Url(input, absoluteBase);
  return href.slice(protocol.length);
}
function normalizeSimplePath(input) {
  const { href } = new Url(input, "https://foo.com/");
  return href.slice("https://foo.com/".length);
}
function normalizePath(input) {
  if (!parentRegex.test(input))
    return normalizeSimplePath(input);
  let total = 1;
  while (parentRegex.test(input))
    total++;
  const uniqDirectory = `z${uniqInStr(input)}/`;
  const search = new RegExp(`^(?:${uniqDirectory})*`);
  const relative = normalizeSimplePath(uniqDirectory.repeat(total) + input);
  return relative.replace(search, (all) => {
    const leftover = all.length / uniqDirectory.length;
    return "../".repeat(total - leftover);
  });
}
function resolve(input, base) {
  if (!base)
    base = "";
  if (isAbsoluteUrl(input))
    return new Url(input).href;
  if (base) {
    if (isAbsoluteUrl(base))
      return new Url(input, base).href;
    if (base.startsWith("//"))
      return normalizeProtocolRelative(input, `https:${base}`);
  }
  if (input.startsWith("//"))
    return normalizeProtocolRelative(input, "https://foo.com/");
  if (input.startsWith("/"))
    return "/" + normalizeSimplePath(input);
  const joined = stripPathFilename(base) + input;
  if (base.startsWith("/"))
    return "/" + normalizeSimplePath(joined);
  const relative = normalizePath(joined);
  if ((base || input).startsWith(".") && !relative.startsWith(".")) {
    return "./" + relative;
  }
  return relative;
}
function resolve$1(input, base) {
  if (base && !base.endsWith("/"))
    base += "/";
  return resolve(input, base);
}
function binarySearch(haystack, needle, comparator, low, high) {
  low = Math.max(low, 0);
  while (low <= high) {
    const mid = low + (high - low >> 1);
    const cmp = comparator(haystack[mid], needle);
    if (cmp === 0) {
      return mid;
    }
    if (cmp < 0) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }
  return ~low;
}
var FastStringArray = class {
  constructor() {
    this.indexes = Object.create(null);
    this.array = [];
  }
  put(key) {
    const { array, indexes } = this;
    let index = indexes[key];
    if (index === void 0) {
      index = indexes[key] = array.length;
      array.push(key);
    }
    return index;
  }
};
var SourceMapTree = class {
  constructor(map, sources) {
    this.map = map;
    this.sources = sources;
    this.lastLine = 0;
    this.lastColumn = 0;
    this.lastIndex = 0;
  }
  traceMappings() {
    const mappings = [];
    const names = new FastStringArray();
    const sources = new FastStringArray();
    const sourcesContent = [];
    const { mappings: rootMappings, names: rootNames } = this.map;
    for (let i = 0; i < rootMappings.length; i++) {
      const segments = rootMappings[i];
      const tracedSegments = [];
      let lastTraced = void 0;
      for (let j = 0; j < segments.length; j++) {
        const segment = segments[j];
        if (segment.length === 1)
          continue;
        const source = this.sources[segment[1]];
        const traced = source.traceSegment(segment[2], segment[3], segment.length === 5 ? rootNames[segment[4]] : "");
        if (!traced)
          continue;
        const { column, line, name } = traced;
        const { content, filename } = traced.source;
        const sourceIndex = sources.put(filename);
        sourcesContent[sourceIndex] = content;
        if (lastTraced && lastTraced[1] === sourceIndex && lastTraced[2] === line && lastTraced[3] === column) {
          continue;
        }
        if (name) {
          lastTraced = [segment[0], sourceIndex, line, column, names.put(name)];
        } else {
          lastTraced = [segment[0], sourceIndex, line, column];
        }
        tracedSegments.push(lastTraced);
      }
      mappings.push(tracedSegments);
    }
    return defaults({
      mappings,
      names: names.array,
      sources: sources.array,
      sourcesContent
    }, this.map);
  }
  traceSegment(line, column, name) {
    const { mappings, names } = this.map;
    if (line >= mappings.length)
      return null;
    const segments = mappings[line];
    if (segments.length === 0)
      return null;
    let low = 0;
    let high = segments.length - 1;
    if (line === this.lastLine) {
      if (column >= this.lastColumn) {
        low = this.lastIndex;
      } else {
        high = this.lastIndex;
      }
    }
    let index = binarySearch(segments, column, segmentComparator$1, low, high);
    this.lastLine = line;
    this.lastColumn = column;
    if (index === -1) {
      this.lastIndex = index;
      return null;
    }
    if (index < 0) {
      index = ~index - 1;
    }
    this.lastIndex = index;
    const segment = segments[index];
    if (segment.length === 1)
      return null;
    const source = this.sources[segment[1]];
    return source.traceSegment(segment[2], segment[3], segment.length === 5 ? names[segment[4]] : name);
  }
};
function segmentComparator$1(segment, column) {
  return segment[0] - column;
}
function stripFilename(path3) {
  if (!path3)
    return "";
  const index = path3.lastIndexOf("/");
  return path3.slice(0, index + 1);
}
function asArray(value) {
  if (Array.isArray(value))
    return value;
  return [value];
}
function buildSourceMapTree(input, loader, relativeRoot) {
  const maps = asArray(input).map(decodeSourceMap);
  const map = maps.pop();
  for (let i = 0; i < maps.length; i++) {
    if (maps[i].sources.length > 1) {
      throw new Error(`Transformation map ${i} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
    }
  }
  const { sourceRoot, sources, sourcesContent } = map;
  const children = sources.map((sourceFile, i) => {
    const uri = resolve$1(sourceFile || "", resolve$1(sourceRoot || "", stripFilename(relativeRoot)));
    const sourceMap = loader(uri);
    if (!sourceMap) {
      const sourceContent = sourcesContent ? sourcesContent[i] : null;
      return new OriginalSource(uri, sourceContent);
    }
    return buildSourceMapTree(decodeSourceMap(sourceMap), loader, uri);
  });
  let tree = new SourceMapTree(map, children);
  for (let i = maps.length - 1; i >= 0; i--) {
    tree = new SourceMapTree(maps[i], [tree]);
  }
  return tree;
}
var SourceMap = class {
  constructor(map, options) {
    this.version = 3;
    if ("file" in map)
      this.file = map.file;
    this.mappings = options.decodedMappings ? map.mappings : encode(map.mappings);
    this.names = map.names;
    this.sources = map.sources;
    if (!options.excludeContent && "sourcesContent" in map) {
      this.sourcesContent = map.sourcesContent;
    }
  }
  toString() {
    return JSON.stringify(this);
  }
};
function remapping(input, loader, options) {
  const opts = typeof options === "object" ? options : { excludeContent: !!options, decodedMappings: false };
  const graph = buildSourceMapTree(input, loader);
  return new SourceMap(graph.traceMappings(), opts);
}
var remapping_default = remapping;

// src/esbuild/utils.ts
var ExtToLoader = {
  ".js": "js",
  ".mjs": "js",
  ".cjs": "js",
  ".jsx": "jsx",
  ".ts": "ts",
  ".cts": "ts",
  ".mts": "ts",
  ".tsx": "tsx",
  ".css": "css",
  ".json": "json",
  ".txt": "text"
};
function guessLoader(id) {
  return ExtToLoader[extname(id).toLowerCase()] || "js";
}
function fixSourceMap(map) {
  Object.defineProperty(map, "toString", {
    enumerable: false,
    value: function toString() {
      return JSON.stringify(this);
    }
  });
  Object.defineProperty(map, "toUrl", {
    enumerable: false,
    value: function toUrl() {
      return "data:application/json;charset=utf-8;base64," + Buffer.from(this.toString()).toString("base64");
    }
  });
  return map;
}
var nullSourceMap = {
  names: [],
  sources: [],
  mappings: "",
  version: 3
};
function combineSourcemaps(filename, sourcemapList) {
  if (sourcemapList.length === 0 || sourcemapList.every((m) => m.sources.length === 0)) {
    return __spreadValues({}, nullSourceMap);
  }
  let map;
  let mapIndex = 1;
  const useArrayInterface = sourcemapList.slice(0, -1).find((m) => m.sources.length !== 1) === void 0;
  if (useArrayInterface) {
    map = remapping_default(sourcemapList, () => null, true);
  } else {
    map = remapping_default(sourcemapList[0], function loader(sourcefile) {
      if (sourcefile === filename && sourcemapList[mapIndex]) {
        return sourcemapList[mapIndex++];
      } else {
        return __spreadValues({}, nullSourceMap);
      }
    }, true);
  }
  if (!map.file) {
    delete map.file;
  }
  return map;
}

// src/esbuild/index.ts
function getEsbuildPlugin(factory) {
  return (userOptions) => {
    var _a, _b;
    const meta = {
      framework: "esbuild"
    };
    const plugin = factory(userOptions, meta);
    return {
      name: plugin.name,
      setup: (_b = (_a = plugin.esbuild) == null ? void 0 : _a.setup) != null ? _b : function setup({ onStart, onEnd, onResolve, onLoad }) {
        var _a2, _b2, _c, _d;
        const onResolveFilter = (_b2 = (_a2 = plugin.esbuild) == null ? void 0 : _a2.onResolveFilter) != null ? _b2 : /.*/;
        const onLoadFilter = (_d = (_c = plugin.esbuild) == null ? void 0 : _c.onLoadFilter) != null ? _d : /.*/;
        if (plugin.buildStart) {
          onStart(plugin.buildStart);
        }
        if (plugin.buildEnd) {
          onEnd(plugin.buildEnd);
        }
        if (plugin.resolveId) {
          onResolve({ filter: onResolveFilter }, async (args) => {
            const result = await plugin.resolveId(args.path, args.importer);
            if (typeof result === "string") {
              return { path: result, namespace: plugin.name };
            } else if (typeof result === "object" && result !== null) {
              return { path: result.id, external: result.external, namespace: plugin.name };
            }
          });
        }
        if (plugin.load || plugin.transform) {
          onLoad({ filter: onLoadFilter }, async (args) => {
            const errors = [];
            const warnings = [];
            const pluginContext = {
              error(message) {
                errors.push({ text: String(message) });
              },
              warn(message) {
                warnings.push({ text: String(message) });
              }
            };
            const resolveDir = path2.dirname(args.path);
            let code, map;
            if (plugin.load) {
              const result = await plugin.load.call(pluginContext, args.path);
              if (typeof result === "string") {
                code = result;
              } else if (typeof result === "object" && result !== null) {
                code = result.code;
                map = result.map;
              }
            }
            if (!plugin.transform) {
              if (code === void 0) {
                return null;
              }
              if (map) {
                if (!map.sourcesContent || map.sourcesContent.length === 0) {
                  map.sourcesContent = [code];
                }
                map = fixSourceMap(map);
                code += `
//# sourceMappingURL=${map.toUrl()}`;
              }
              return { contents: code, errors, warnings, loader: guessLoader(args.path), resolveDir };
            }
            if (!plugin.transformInclude || plugin.transformInclude(args.path)) {
              if (!code) {
                code = await fs.promises.readFile(args.path, "utf8");
              }
              const result = await plugin.transform.call(pluginContext, code, args.path);
              if (typeof result === "string") {
                code = result;
              } else if (typeof result === "object" && result !== null) {
                code = result.code;
                if (map && result.map) {
                  map = combineSourcemaps(args.path, [
                    result.map,
                    map
                  ]);
                } else {
                  map = result.map;
                }
              }
            }
            if (code) {
              if (map) {
                if (!map.sourcesContent || map.sourcesContent.length === 0) {
                  map.sourcesContent = [code];
                }
                map = fixSourceMap(map);
                code += `
//# sourceMappingURL=${map.toUrl()}`;
              }
              return { contents: code, errors, warnings, loader: guessLoader(args.path), resolveDir };
            }
          });
        }
      }
    };
  };
}

// src/rollup/index.ts
function getRollupPlugin(factory) {
  return (userOptions) => {
    const meta = {
      framework: "rollup"
    };
    const rawPlugin = factory(userOptions, meta);
    return toRollupPlugin(rawPlugin);
  };
}
function toRollupPlugin(plugin) {
  if (plugin.transform && plugin.transformInclude) {
    const _transform = plugin.transform;
    plugin.transform = function(code, id) {
      if (plugin.transformInclude && !plugin.transformInclude(id)) {
        return null;
      }
      return _transform.call(this, code, id);
    };
  }
  if (plugin.rollup) {
    Object.assign(plugin, plugin.rollup);
  }
  return plugin;
}

// src/vite/index.ts
function getVitePlugin(factory) {
  return (userOptions) => {
    const meta = {
      framework: "vite"
    };
    const rawPlugin = factory(userOptions, meta);
    const plugin = toRollupPlugin(rawPlugin);
    if (rawPlugin.vite) {
      Object.assign(plugin, rawPlugin.vite);
    }
    return plugin;
  };
}

// src/webpack/index.ts
import fs2 from "fs";
import { fileURLToPath as fileURLToPath2 } from "url";
import { resolve as resolve2, dirname } from "path";
import VirtualModulesPlugin from "webpack-virtual-modules";

// src/webpack/utils.ts
function slash(path3) {
  return path3.replace(/\\/g, "/");
}
function backSlash(path3) {
  return path3.replace(/\//g, "\\");
}

// src/webpack/index.ts
var _dirname = typeof __dirname !== "undefined" ? __dirname : dirname(fileURLToPath2(import.meta.url));
var TRANSFORM_LOADER = resolve2(_dirname, "webpack/loaders/transform.js");
var LOAD_LOADER = resolve2(_dirname, "webpack/loaders/load.js");
function getWebpackPlugin(factory) {
  return (userOptions) => {
    return {
      apply(compiler) {
        var _a;
        const meta = {
          framework: "webpack",
          webpack: {
            compiler
          }
        };
        const virtualModulePrefix = resolve2(process.cwd(), "_virtual_");
        const rawPlugin = factory(userOptions, meta);
        const plugin = Object.assign(rawPlugin, {
          __unpluginMeta: meta,
          __virtualModulePrefix: virtualModulePrefix
        });
        const injected = compiler.$unpluginContext || {};
        compiler.$unpluginContext = injected;
        injected[plugin.name] = plugin;
        compiler.hooks.thisCompilation.tap(plugin.name, (compilation) => {
          compilation.hooks.childCompiler.tap(plugin.name, (childCompiler) => {
            childCompiler.$unpluginContext = injected;
          });
        });
        if (plugin.transform) {
          compiler.options.module.rules.push({
            include(id) {
              if (id == null) {
                return false;
              }
              if (plugin.transformInclude) {
                return plugin.transformInclude(id);
              } else {
                return true;
              }
            },
            enforce: plugin.enforce,
            use: [{
              loader: TRANSFORM_LOADER,
              options: {
                unpluginName: plugin.name
              }
            }]
          });
        }
        if (plugin.resolveId) {
          let vfs = compiler.options.plugins.find((i) => i instanceof VirtualModulesPlugin);
          if (!vfs) {
            vfs = new VirtualModulesPlugin();
            compiler.options.plugins.push(vfs);
          }
          plugin.__vfsModules = /* @__PURE__ */ new Set();
          plugin.__vfs = vfs;
          const resolver = {
            apply(resolver2) {
              const target = resolver2.ensureHook("resolve");
              const tap = () => async (request, resolveContext, callback) => {
                if (!request.request) {
                  return callback();
                }
                const id = backSlash(request.request);
                if (id.startsWith(plugin.__virtualModulePrefix)) {
                  return callback();
                }
                const result = await plugin.resolveId(slash(id));
                if (result == null) {
                  return callback();
                }
                let resolved = typeof result === "string" ? result : result.id;
                if (!fs2.existsSync(resolved)) {
                  resolved = plugin.__virtualModulePrefix + id;
                  plugin.__vfs.writeModule(resolved, "");
                  plugin.__vfsModules.add(resolved);
                }
                const newRequest = __spreadProps(__spreadValues({}, request), {
                  request: resolved
                });
                resolver2.doResolve(target, newRequest, null, resolveContext, callback);
              };
              resolver2.getHook("resolve").tapAsync("unplugin", tap());
            }
          };
          compiler.options.resolve.plugins = compiler.options.resolve.plugins || [];
          compiler.options.resolve.plugins.push(resolver);
        }
        if (plugin.load && plugin.__vfsModules) {
          compiler.options.module.rules.push({
            include(id) {
              return id != null && plugin.__vfsModules.has(id);
            },
            enforce: plugin.enforce,
            use: [{
              loader: LOAD_LOADER,
              options: {
                unpluginName: plugin.name
              }
            }]
          });
        }
        if (plugin.webpack) {
          plugin.webpack(compiler);
        }
        (_a = plugin.buildStart) == null ? void 0 : _a.call(plugin);
        if (plugin.buildEnd) {
          compiler.hooks.done.tapPromise(plugin.name, async () => {
            await plugin.buildEnd();
          });
        }
      }
    };
  };
}

// src/define.ts
function createUnplugin(factory) {
  return {
    get esbuild() {
      return getEsbuildPlugin(factory);
    },
    get rollup() {
      return getRollupPlugin(factory);
    },
    get vite() {
      return getVitePlugin(factory);
    },
    get webpack() {
      return getWebpackPlugin(factory);
    },
    get raw() {
      return factory;
    }
  };
}
export {
  createUnplugin
};
