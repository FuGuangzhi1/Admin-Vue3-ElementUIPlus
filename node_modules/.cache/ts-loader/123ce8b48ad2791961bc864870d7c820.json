{"remainingRequest":"H:\\桌面\\showtimecodeweb\\node_modules\\babel-loader\\lib\\index.js!H:\\桌面\\showtimecodeweb\\node_modules\\ts-loader\\index.js??ref--14-2!H:\\桌面\\showtimecodeweb\\src\\api\\studyInfoApi.ts","dependencies":[{"path":"H:\\桌面\\showtimecodeweb\\src\\api\\studyInfoApi.ts","mtime":1651361759740},{"path":"H:\\桌面\\showtimecodeweb\\babel.config.js","mtime":1642330622538},{"path":"H:\\桌面\\showtimecodeweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1642330605221},{"path":"H:\\桌面\\showtimecodeweb\\node_modules\\babel-loader\\lib\\index.js","mtime":1642330607368},{"path":"H:\\桌面\\showtimecodeweb\\node_modules\\ts-loader\\index.js","mtime":1642330608824}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["H:\\桌面\\showtimecodeweb\\src\\api\\studyInfoApi.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA;;IACM,Y;AAAN,0BAAA;AAAA;AACY,SAAA,GAAA,GAAM,gBAAN;AAuDX;;;;;yGArDU,iBAA4B,aAA5B,EAA0D,WAA1D,EAAsF,WAAtF,EAA2G,QAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACU,iBAAW,OAAX,CAAmB;AAC5B,kBAAA,GAAG,EAAE,KAAK,GAAL,GAAW,kBADY;AAE5B,kBAAA,MAAM,EAAE,KAFoB;AAG5B,kBAAA,MAAM,EAAE;AACJ,oBAAA,aAAa,EAAE,aADX;AAEJ,oBAAA,WAAW,EAAE,WAFT;AAGJ,oBAAA,WAAW,EAAE,WAHT;AAIJ,oBAAA,QAAQ,EAAE;AAJN;AAHoB,iBAAnB,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;qGAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACU,iBAAW,OAAX,CAAmB;AAC5B,kBAAA,GAAG,EAAE,KAAK,GAAL,GAAW,cADY;AAE5B,kBAAA,MAAM,EAAE;AAFoB,iBAAnB,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;qGAMA,kBAAwB,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACU,iBAAW,OAAX,CAAmB;AAC5B,kBAAA,GAAG,EAAE,KAAK,GAAL,GAAW,cADY;AAE5B,kBAAA,MAAM,EAAE,MAFoB;AAG5B,kBAAA,IAAI,EAAE;AAHsB,iBAAnB,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;sGAOA,kBAAyB,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACU,iBAAW,OAAX,CAAmB;AAC5B,kBAAA,GAAG,EAAE,KAAK,GAAL,GAAW,eADY;AAE5B,kBAAA,MAAM,EAAE,KAFoB;AAG5B,kBAAA,IAAI,EAAE;AAHsB,iBAAnB,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;wGAOA,kBAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACU,iBAAW,OAAX,CAAmB;AAC5B,kBAAA,GAAG,EAAE,KAAK,GAAL,GAAW,iBADY;AAE5B,kBAAA,MAAM,EAAE,QAFoB;AAG5B,kBAAA,MAAM,EAAE;AACJ,oBAAA,EAAE,EAAE;AADA;AAHoB,iBAAnB,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;0GASA,kBAA6B,SAA7B,EAAuD,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACU,iBAAW,OAAX,CAAmB;AAC5B,kBAAA,YAAY,EAAC,MADe;AAE5B,kBAAA,GAAG,EAAE,KAAK,GAAL,GAAW,mBAFY;AAG5B,kBAAA,MAAM,EAAE,KAHoB;AAI5B,kBAAA,MAAM,EAAE;AACJ,oBAAA,SAAS,EAAC,SADN;AAEJ,oBAAA,SAAS,EAAC;AAFN;AAJoB,iBAAnB,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;eAaI,IAAI,YAAJ,E","sourcesContent":["import { StudyInfo } from \"@/business/studyBLL\";\r\nimport httpClinet from \"@/http/requert\";\r\nclass StudyInfoApi {\r\n    private url = 'api/StudyInfo/'\r\n\r\n    public async GetStudyInfoViewAsync(studyInfoName: string | null, studyTypeId: string | null, currentPage: Number, pageSize: Number): Promise<any> {\r\n        return await httpClinet.request({\r\n            url: this.url + 'GetStudyInfoView',\r\n            method: 'get',\r\n            params: {\r\n                studyInfoName: studyInfoName,\r\n                studyTypeId: studyTypeId,\r\n                currentPage: currentPage,\r\n                pageSize: pageSize,\r\n\r\n            }\r\n        })\r\n    }\r\n    public async GetStudyTypeAsync(): Promise<any> {\r\n        return await httpClinet.request({\r\n            url: this.url + 'GetStudyType',\r\n            method: 'get',\r\n        })\r\n    }\r\n    public async AddStudyInfoAsync(studyInfo: StudyInfo): Promise<any> {\r\n        return await httpClinet.request({\r\n            url: this.url + 'AddStudyInfo',\r\n            method: 'post',\r\n            data: studyInfo\r\n        })\r\n    }\r\n    public async EditStudyInfoAsync(studyInfo: StudyInfo): Promise<any> {\r\n        return await httpClinet.request({\r\n            url: this.url + 'EditStudyInfo',\r\n            method: 'put',\r\n            data: studyInfo\r\n        })\r\n    }\r\n    public async RemoveStudyInfoAsync(id: string | null): Promise<any> {\r\n        return await httpClinet.request({\r\n            url: this.url + 'RemoveStudyInfo',\r\n            method: 'delete',\r\n            params: {\r\n                id: id\r\n            }\r\n        })\r\n    }\r\n    public async GetStudyInfoExeclAsync(execlName: string | null, sheetName: string | null): Promise<any> {\r\n        return await httpClinet.request({\r\n            responseType:'blob',\r\n            url: this.url + 'GetStudyInfoExecl',\r\n            method: 'get',\r\n            params: {\r\n                execlName:execlName,\r\n                sheetNamr:sheetName\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default new StudyInfoApi()"],"sourceRoot":""}]}