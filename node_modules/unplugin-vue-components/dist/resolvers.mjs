import {
  LibraryResolver,
  camelCase,
  getPkgVersion,
  kebabCase,
  pascalCase,
  resolveImportPath,
  tryLoadVeturTags
} from "./chunk-V5TNASXD.mjs";
import {
  __commonJS,
  __require,
  __spreadValues
} from "./chunk-EKXJN6YJ.mjs";

// node_modules/.pnpm/@vueuse+core@6.1.0_vue@3.2.26/node_modules/@vueuse/core/indexes.json
var require_indexes = __commonJS({
  "node_modules/.pnpm/@vueuse+core@6.1.0_vue@3.2.26/node_modules/@vueuse/core/indexes.json"(exports, module) {
    module.exports = {
      packages: {
        shared: {
          name: "shared",
          display: "Shared utilities",
          dir: "packages/shared"
        },
        core: {
          name: "core",
          display: "VueUse",
          description: "Collection of essential Vue Composition Utilities",
          dir: "packages/core"
        },
        components: {
          name: "components",
          display: "Components",
          description: "Renderless components for VueUse",
          author: "Jacob Clevenger<https://github.com/wheatjs>",
          external: [
            "@vueuse/core",
            "@vueuse/shared"
          ],
          dir: "packages/components"
        },
        router: {
          name: "router",
          display: "Router",
          description: "Utilities for vue-router",
          addon: true,
          external: [
            "vue-router"
          ],
          globals: {
            "vue-router": "VueRouter"
          },
          dir: "packages/router",
          docs: "https://vueuse.org/router/README.html"
        },
        integrations: {
          name: "integrations",
          display: "Integrations",
          description: "Integration wrappers for utility libraries",
          addon: true,
          submodules: true,
          external: [
            "axios",
            "universal-cookie",
            "qrcode",
            "http",
            "nprogress",
            "jwt-decode",
            "focus-trap"
          ],
          globals: {
            axios: "axios",
            "universal-cookie": "UniversalCookie",
            qrcode: "QRCode",
            nprogress: "nprogress",
            "jwt-decode": "jwt_decode",
            "focus-trap": "focusTrap"
          },
          dir: "packages/integrations",
          docs: "https://vueuse.org/integrations/README.html"
        },
        rxjs: {
          name: "rxjs",
          display: "RxJS",
          description: "Enables RxJS reactive functions in Vue",
          addon: true,
          external: [
            "rxjs",
            "rxjs/operators"
          ],
          globals: {
            rxjs: "rxjs",
            "rxjs/operators": "rxjs.operator"
          },
          dir: "packages/rxjs",
          docs: "https://vueuse.org/rxjs/README.html"
        },
        firebase: {
          name: "firebase",
          display: "Firebase",
          description: "Enables realtime bindings for Firebase",
          addon: true,
          submodules: true,
          external: [
            "firebase",
            "firebase/app"
          ],
          globals: {
            firebase: "firebase",
            "firebase/app": "firebase"
          },
          dir: "packages/firebase",
          docs: "https://vueuse.org/firebase/README.html"
        },
        electron: {
          name: "electron",
          display: "Electron",
          description: "Electron renderer process modules for VueUse",
          author: "Archer Gu<https://github.com/ArcherGu>",
          addon: true,
          external: [
            "electron"
          ],
          iife: false,
          dir: "packages/electron",
          docs: "https://vueuse.org/electron/README.html"
        }
      },
      categories: [
        "@Electron",
        "@Firebase",
        "@Integrations",
        "@Router",
        "@RxJS",
        "Animation",
        "Browser",
        "Component",
        "Formatters",
        "Misc",
        "Sensors",
        "State",
        "Utilities",
        "Watch"
      ],
      functions: [
        {
          name: "and",
          package: "shared",
          docs: "https://vueuse.org/shared/and/",
          category: "Utilities",
          description: "`AND` condition for refs"
        },
        {
          name: "biSyncRef",
          package: "shared",
          docs: "https://vueuse.org/shared/biSyncRef/",
          category: "Utilities",
          description: "two-way refs synchronization"
        },
        {
          name: "controlledComputed",
          package: "shared",
          docs: "https://vueuse.org/shared/controlledComputed/",
          category: "Utilities",
          description: "explicitly define the deps of computed"
        },
        {
          name: "controlledRef",
          package: "shared",
          docs: "https://vueuse.org/shared/controlledRef/",
          category: "Utilities",
          description: "fine-grained controls over ref and its reactivity"
        },
        {
          name: "createEventHook",
          package: "shared",
          docs: "https://vueuse.org/shared/createEventHook/",
          category: "Utilities",
          description: "utility for creating event hooks"
        },
        {
          name: "createGlobalState",
          package: "shared",
          docs: "https://vueuse.org/shared/createGlobalState/",
          category: "State",
          description: "keep states in the global scope to be reusable across Vue instances"
        },
        {
          name: "createSharedComposable",
          package: "shared",
          docs: "https://vueuse.org/shared/createSharedComposable/",
          category: "State",
          description: "make a composable function usable with multiple Vue instances"
        },
        {
          name: "debouncedWatch",
          package: "shared",
          docs: "https://vueuse.org/shared/debouncedWatch/",
          category: "Watch",
          description: "debounced watch"
        },
        {
          name: "extendRef",
          package: "shared",
          docs: "https://vueuse.org/shared/extendRef/",
          category: "Utilities",
          description: "add extra attributes to Ref"
        },
        {
          name: "get",
          package: "shared",
          docs: "https://vueuse.org/shared/get/",
          category: "Utilities",
          description: "shorthand for accessing `ref.value`"
        },
        {
          name: "ignorableWatch",
          package: "shared",
          docs: "https://vueuse.org/shared/ignorableWatch/",
          category: "Watch",
          description: "ignorable watch"
        },
        {
          name: "makeDestructurable",
          package: "shared",
          docs: "https://vueuse.org/shared/makeDestructurable/",
          category: "Utilities",
          description: "make isomorphic destructurable for object and array at the same time"
        },
        {
          name: "not",
          package: "shared",
          docs: "https://vueuse.org/shared/not/",
          category: "Utilities",
          description: "`NOT` condition for ref"
        },
        {
          name: "or",
          package: "shared",
          docs: "https://vueuse.org/shared/or/",
          category: "Utilities",
          description: "`OR` conditions for refs"
        },
        {
          name: "pausableWatch",
          package: "shared",
          docs: "https://vueuse.org/shared/pausableWatch/",
          category: "Watch",
          description: "pausable watch"
        },
        {
          name: "reactify",
          package: "shared",
          docs: "https://vueuse.org/shared/reactify/",
          category: "Utilities",
          description: "converts plain functions into reactive functions"
        },
        {
          name: "reactifyObject",
          package: "shared",
          docs: "https://vueuse.org/shared/reactifyObject/",
          category: "Utilities",
          description: "apply `reactify` to an object"
        },
        {
          name: "reactivePick",
          package: "shared",
          docs: "https://vueuse.org/shared/reactivePick/",
          category: "Utilities",
          description: "reactively pick fields from a reactive object"
        },
        {
          name: "set",
          package: "shared",
          docs: "https://vueuse.org/shared/set/",
          category: "Utilities",
          description: "shorthand for `ref.value = x`"
        },
        {
          name: "syncRef",
          package: "shared",
          docs: "https://vueuse.org/shared/syncRef/",
          category: "Utilities",
          description: "keep target refs in sync with a source ref"
        },
        {
          name: "throttledWatch",
          package: "shared",
          docs: "https://vueuse.org/shared/throttledWatch/",
          category: "Watch",
          description: "throttled watch"
        },
        {
          name: "toReactive",
          package: "shared",
          docs: "https://vueuse.org/shared/toReactive/",
          category: "Utilities",
          description: "converts ref to reactive"
        },
        {
          name: "toRefs",
          package: "shared",
          docs: "https://vueuse.org/shared/toRefs/",
          category: "Utilities",
          description: "extended [`toRefs`](https://v3.vuejs.org/api/refs-api.html#torefs) that also accepts refs of an object"
        },
        {
          name: "tryOnBeforeUnmount",
          package: "shared",
          docs: "https://vueuse.org/shared/tryOnBeforeUnmount/",
          category: "Component",
          description: "safe `onBeforeUnmount`"
        },
        {
          name: "tryOnMounted",
          package: "shared",
          docs: "https://vueuse.org/shared/tryOnMounted/",
          category: "Component",
          description: "safe `onMounted`"
        },
        {
          name: "tryOnScopeDispose",
          package: "shared",
          docs: "https://vueuse.org/shared/tryOnScopeDispose/",
          category: "Component",
          description: "safe `onScopeDispose`"
        },
        {
          name: "tryOnUnmounted",
          package: "shared",
          docs: "https://vueuse.org/shared/tryOnUnmounted/",
          category: "Component",
          description: "safe `onUnmounted`"
        },
        {
          name: "until",
          package: "shared",
          docs: "https://vueuse.org/shared/until/",
          category: "Watch",
          description: "promised one-time watch for changes"
        },
        {
          name: "useCounter",
          package: "shared",
          docs: "https://vueuse.org/shared/useCounter/",
          category: "Utilities",
          description: "basic counter with utility functions"
        },
        {
          name: "useDebounce",
          package: "shared",
          docs: "https://vueuse.org/shared/useDebounce/",
          category: "Utilities",
          description: "debounce execution of a ref value"
        },
        {
          name: "useDebounceFn",
          package: "shared",
          docs: "https://vueuse.org/shared/useDebounceFn/",
          category: "Utilities",
          description: "debounce execution of a function"
        },
        {
          name: "useInterval",
          package: "shared",
          docs: "https://vueuse.org/shared/useInterval/",
          category: "Animation",
          description: "reactive counter increases on every interval"
        },
        {
          name: "useIntervalFn",
          package: "shared",
          docs: "https://vueuse.org/shared/useIntervalFn/",
          category: "Animation",
          description: "wrapper for `setInterval` with controls"
        },
        {
          name: "useLastChanged",
          package: "shared",
          docs: "https://vueuse.org/shared/useLastChanged/",
          category: "Utilities",
          description: "records the timestamp of the last change"
        },
        {
          name: "useThrottle",
          package: "shared",
          docs: "https://vueuse.org/shared/useThrottle/",
          category: "Utilities",
          description: "throttle changing of a ref value"
        },
        {
          name: "useThrottleFn",
          package: "shared",
          docs: "https://vueuse.org/shared/useThrottleFn/",
          category: "Utilities",
          description: "throttle execution of a function"
        },
        {
          name: "useTimeout",
          package: "shared",
          docs: "https://vueuse.org/shared/useTimeout/",
          category: "Animation",
          description: "update value after a given time with controls"
        },
        {
          name: "useTimeoutFn",
          package: "shared",
          docs: "https://vueuse.org/shared/useTimeoutFn/",
          category: "Animation",
          description: "wrapper for `setTimeout` with controls"
        },
        {
          name: "useToggle",
          package: "shared",
          docs: "https://vueuse.org/shared/useToggle/",
          category: "Utilities",
          description: "a boolean switcher with utility functions"
        },
        {
          name: "utils",
          package: "shared",
          internal: true
        },
        {
          name: "watchWithFilter",
          package: "shared",
          docs: "https://vueuse.org/shared/watchWithFilter/",
          category: "Watch",
          description: "`watch` with additional EventFilter control"
        },
        {
          name: "whenever",
          package: "shared",
          docs: "https://vueuse.org/shared/whenever/",
          category: "Watch",
          description: "shorthand for watching value to be truthy"
        },
        {
          name: "asyncComputed",
          package: "core",
          docs: "https://vueuse.org/core/asyncComputed/",
          category: "Utilities",
          description: "computed for async functions"
        },
        {
          name: "autoResetRef",
          package: "core",
          docs: "https://vueuse.org/core/autoResetRef/",
          category: "Utilities",
          description: "a ref which will be reset to the default value after some time"
        },
        {
          name: "computedInject",
          package: "core",
          docs: "https://vueuse.org/core/computedInject/",
          category: "Component",
          description: "combine computed and inject"
        },
        {
          name: "onClickOutside",
          package: "core",
          component: true,
          directive: true,
          docs: "https://vueuse.org/core/onClickOutside/",
          category: "Sensors",
          description: "listen for clicks outside of an element"
        },
        {
          name: "onKeyStroke",
          package: "core",
          docs: "https://vueuse.org/core/onKeyStroke/",
          category: "Sensors",
          description: "listen for keyboard key being stroked"
        },
        {
          name: "onStartTyping",
          package: "core",
          docs: "https://vueuse.org/core/onStartTyping/",
          category: "Sensors",
          description: "fires when users start typing on non-editable elements"
        },
        {
          name: "templateRef",
          package: "core",
          docs: "https://vueuse.org/core/templateRef/",
          category: "Component",
          description: "shorthand for binding ref to template element"
        },
        {
          name: "unrefElement",
          package: "core",
          docs: "https://vueuse.org/core/unrefElement/",
          category: "Component",
          description: "unref for dom element"
        },
        {
          name: "useActiveElement",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useActiveElement/",
          category: "Browser",
          description: "reactive `document.activeElement`"
        },
        {
          name: "useAsyncState",
          package: "core",
          docs: "https://vueuse.org/core/useAsyncState/",
          category: "Utilities",
          description: "reactive async state"
        },
        {
          name: "useBattery",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useBattery/",
          category: "Sensors",
          description: "reactive [Battery Status API](https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API)"
        },
        {
          name: "useBreakpoints",
          package: "core",
          docs: "https://vueuse.org/core/useBreakpoints/",
          category: "Browser",
          description: "reactive viewport breakpoints"
        },
        {
          name: "useBrowserLocation",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useBrowserLocation/",
          category: "Browser",
          description: "reactive browser location"
        },
        {
          name: "useClipboard",
          package: "core",
          docs: "https://vueuse.org/core/useClipboard/",
          category: "Browser",
          description: "reactive [Clipboard API](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API)"
        },
        {
          name: "useCssVar",
          package: "core",
          docs: "https://vueuse.org/core/useCssVar/",
          category: "Browser",
          description: "manipulate CSS variables"
        },
        {
          name: "useDark",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useDark/",
          category: "Browser",
          description: "reactive dark mode with auto data persistence"
        },
        {
          name: "useDeviceMotion",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useDeviceMotion/",
          category: "Sensors",
          description: "reactive [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent)"
        },
        {
          name: "useDeviceOrientation",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useDeviceOrientation/",
          category: "Sensors",
          description: "reactive [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent)"
        },
        {
          name: "useDevicePixelRatio",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useDevicePixelRatio/",
          category: "Sensors",
          description: "reactively track [`window.devicePixelRatio`](https://developer.mozilla.org/ru/docs/Web/API/Window/devicePixelRatio)"
        },
        {
          name: "useDevicesList",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useDevicesList/",
          category: "Sensors",
          description: "reactive [enumerateDevices](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices) listing avaliable input/output devices"
        },
        {
          name: "useDocumentVisibility",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useDocumentVisibility/",
          category: "Sensors",
          description: "reactively track [`document.visibilityState`](https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState)"
        },
        {
          name: "useElementBounding",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useElementBounding/",
          category: "Sensors",
          description: "reactive [bounding box](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) of an HTML element"
        },
        {
          name: "useElementSize",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useElementSize/",
          category: "Sensors",
          description: "reactive size of an HTML element"
        },
        {
          name: "useElementVisibility",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useElementVisibility/",
          category: "Sensors",
          description: "tracks the visibility of an element within the viewport"
        },
        {
          name: "useEventBus",
          package: "core",
          docs: "https://vueuse.org/core/useEventBus/",
          category: "Utilities",
          description: "a basic event bus"
        },
        {
          name: "useEventListener",
          package: "core",
          docs: "https://vueuse.org/core/useEventListener/",
          category: "Browser",
          description: "use EventListener with ease"
        },
        {
          name: "useEventSource",
          package: "core",
          docs: "https://vueuse.org/core/useEventSource/",
          category: "Misc",
          description: "an [EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource) or [Server-Sent-Events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events) instance opens a persistent connection to an HTTP server"
        },
        {
          name: "useFavicon",
          package: "core",
          docs: "https://vueuse.org/core/useFavicon/",
          category: "Browser",
          description: "reactive favicon"
        },
        {
          name: "useFetch",
          package: "core",
          docs: "https://vueuse.org/core/useFetch/",
          category: "Browser",
          description: "reactive [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) provides the ability to abort requests"
        },
        {
          name: "useFullscreen",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useFullscreen/",
          category: "Browser",
          description: "reactive [Fullscreen API](https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API)"
        },
        {
          name: "useGeolocation",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useGeolocation/",
          category: "Sensors",
          description: "reactive [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API)"
        },
        {
          name: "useIdle",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useIdle/",
          category: "Sensors",
          description: "tracks whether the user is being inactive"
        },
        {
          name: "useIntersectionObserver",
          package: "core",
          docs: "https://vueuse.org/core/useIntersectionObserver/",
          category: "Sensors",
          description: "detects that a target element's visibility"
        },
        {
          name: "useKeyModifier",
          package: "core",
          docs: "https://vueuse.org/core/useKeyModifier/",
          category: "Sensors",
          description: "reactive [Modifier State](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState)"
        },
        {
          name: "useLocalStorage",
          package: "core",
          docs: "https://vueuse.org/core/useLocalStorage/",
          category: "State",
          description: "reactive [LocalStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)"
        },
        {
          name: "useMagicKeys",
          package: "core",
          docs: "https://vueuse.org/core/useMagicKeys/",
          category: "Sensors",
          description: "reactive keys pressed state"
        },
        {
          name: "useManualRefHistory",
          package: "core",
          docs: "https://vueuse.org/core/useManualRefHistory/",
          category: "Utilities",
          description: "manually track the change history of a ref when the using calls `commit()`"
        },
        {
          name: "useMediaControls",
          package: "core",
          docs: "https://vueuse.org/core/useMediaControls/",
          category: "Browser",
          description: "reactive media controls for both `audio` and `video` elements"
        },
        {
          name: "useMediaQuery",
          package: "core",
          docs: "https://vueuse.org/core/useMediaQuery/",
          category: "Browser",
          description: "reactive [Media Query](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Testing_media_queries)"
        },
        {
          name: "useMouse",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useMouse/",
          category: "Sensors",
          description: "reactive mouse position"
        },
        {
          name: "useMouseInElement",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useMouseInElement/",
          category: "Sensors",
          description: "reactive mouse position related to an element"
        },
        {
          name: "useMousePressed",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useMousePressed/",
          category: "Sensors",
          description: "reactive mouse pressing state"
        },
        {
          name: "useMutationObserver",
          package: "core",
          docs: "https://vueuse.org/core/useMutationObserver/",
          category: "Sensors",
          description: "watch for changes being made to the DOM tree"
        },
        {
          name: "useNetwork",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useNetwork/",
          category: "Sensors",
          description: "reactive [Network status](https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API)"
        },
        {
          name: "useNow",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useNow/",
          category: "Animation",
          description: "reactive current Date instance"
        },
        {
          name: "useOnline",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useOnline/",
          category: "Sensors",
          description: "reactive online state"
        },
        {
          name: "usePageLeave",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/usePageLeave/",
          category: "Sensors",
          description: "reactive state to show whether the mouse leaves the page"
        },
        {
          name: "useParallax",
          package: "core",
          docs: "https://vueuse.org/core/useParallax/",
          category: "Sensors",
          description: "create parallax effect easily"
        },
        {
          name: "usePermission",
          package: "core",
          docs: "https://vueuse.org/core/usePermission/",
          category: "Browser",
          description: "reactive [Permissions API](https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API)"
        },
        {
          name: "usePointerSwipe",
          package: "core",
          docs: "https://vueuse.org/core/usePointerSwipe/",
          category: "Sensors",
          description: "reactive swipe detection based on [PointerEvents](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent)"
        },
        {
          name: "usePreferredColorScheme",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/usePreferredColorScheme/",
          category: "Browser",
          description: "reactive [prefers-color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media query"
        },
        {
          name: "usePreferredDark",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/usePreferredDark/",
          category: "Browser",
          description: "reactive dark theme preference"
        },
        {
          name: "usePreferredLanguages",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/usePreferredLanguages/",
          category: "Browser",
          description: "reactive [Navigator Languages](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages)"
        },
        {
          name: "useRafFn",
          package: "core",
          docs: "https://vueuse.org/core/useRafFn/",
          category: "Animation",
          description: "call function on every `requestAnimationFrame`"
        },
        {
          name: "useRefHistory",
          package: "core",
          docs: "https://vueuse.org/core/useRefHistory/",
          category: "Utilities",
          description: "track the change history of a ref"
        },
        {
          name: "useResizeObserver",
          package: "core",
          docs: "https://vueuse.org/core/useResizeObserver/",
          category: "Sensors",
          description: "reports changes to the dimensions of an Element's content or the border-box"
        },
        {
          name: "useScriptTag",
          package: "core",
          docs: "https://vueuse.org/core/useScriptTag/",
          category: "Browser",
          description: "script tag injecting"
        },
        {
          name: "useSessionStorage",
          package: "core",
          docs: "https://vueuse.org/core/useSessionStorage/",
          category: "State",
          description: "reactive [SessionStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage)"
        },
        {
          name: "useShare",
          package: "core",
          docs: "https://vueuse.org/core/useShare/",
          category: "Browser",
          description: "reactive [Web Share API](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/share)"
        },
        {
          name: "useSpeechRecognition",
          package: "core",
          docs: "https://vueuse.org/core/useSpeechRecognition/",
          category: "Sensors",
          description: "reactive [SpeechRecognition](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition)"
        },
        {
          name: "useStorage",
          package: "core",
          docs: "https://vueuse.org/core/useStorage/",
          category: "State",
          description: "reactive [LocalStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)/[SessionStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage)"
        },
        {
          name: "useSwipe",
          package: "core",
          docs: "https://vueuse.org/core/useSwipe/",
          category: "Sensors",
          description: "reactive swipe detection based on [`TouchEvents`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent)"
        },
        {
          name: "useTemplateRefsList",
          package: "core",
          docs: "https://vueuse.org/core/useTemplateRefsList/",
          category: "Component",
          description: "shorthand for binding refs to template elements and components inside `v-for`"
        },
        {
          name: "useTimeAgo",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useTimeAgo/",
          category: "Formatters",
          description: "reactive time ago"
        },
        {
          name: "useTimestamp",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useTimestamp/",
          category: "Animation",
          description: "reactive current timestamp"
        },
        {
          name: "useTitle",
          package: "core",
          docs: "https://vueuse.org/core/useTitle/",
          category: "Browser",
          description: "reactive document title"
        },
        {
          name: "useTransition",
          package: "core",
          docs: "https://vueuse.org/core/useTransition/",
          category: "Animation",
          description: "transition between values"
        },
        {
          name: "useUrlSearchParams",
          package: "core",
          docs: "https://vueuse.org/core/useUrlSearchParams/",
          category: "Browser",
          description: "reactive [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)"
        },
        {
          name: "useUserMedia",
          package: "core",
          docs: "https://vueuse.org/core/useUserMedia/",
          category: "Sensors",
          description: "reactive [`mediaDevices.getUserMedia`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia) streaming"
        },
        {
          name: "useVModel",
          package: "core",
          docs: "https://vueuse.org/core/useVModel/",
          category: "Component",
          description: "shorthand for v-model binding"
        },
        {
          name: "useVModels",
          package: "core",
          docs: "https://vueuse.org/core/useVModels/",
          category: "Component",
          description: "shorthand for props v-model binding"
        },
        {
          name: "useWakeLock",
          package: "core",
          docs: "https://vueuse.org/core/useWakeLock/",
          category: "Browser",
          description: "reactive [Screen Wake Lock API](https://developer.mozilla.org/en-US/docs/Web/API/Screen_Wake_Lock_API) provides a way to prevent devices from dimming or locking the screen when an application needs to keep running"
        },
        {
          name: "useWebSocket",
          package: "core",
          docs: "https://vueuse.org/core/useWebSocket/",
          category: "Misc",
          description: "reactive [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/WebSocket) client"
        },
        {
          name: "useWebWorker",
          package: "core",
          docs: "https://vueuse.org/core/useWebWorker/",
          category: "Misc",
          description: "simple [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers) registration and communication"
        },
        {
          name: "useWebWorkerFn",
          package: "core",
          docs: "https://vueuse.org/core/useWebWorkerFn/",
          category: "Misc",
          description: "run expensive function without blocking the UI"
        },
        {
          name: "useWindowFocus",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useWindowFocus/",
          category: "Sensors",
          description: "reactively track window focus with `window.onfocus` and `window.onblur` events"
        },
        {
          name: "useWindowScroll",
          package: "core",
          docs: "https://vueuse.org/core/useWindowScroll/",
          category: "Sensors",
          description: "reactive window scroll"
        },
        {
          name: "useWindowSize",
          package: "core",
          component: true,
          docs: "https://vueuse.org/core/useWindowSize/",
          category: "Sensors",
          description: "reactive window size"
        },
        {
          name: "useRouteHash",
          package: "router",
          docs: "https://vueuse.org/router/useRouteHash/",
          category: "@Router",
          description: "shorthand for reactive route.hash"
        },
        {
          name: "useRouteQuery",
          package: "router",
          docs: "https://vueuse.org/router/useRouteQuery/",
          category: "@Router",
          description: "shorthand for reactive route.query"
        },
        {
          name: "useAxios",
          package: "integrations",
          docs: "https://vueuse.org/integrations/useAxios/",
          category: "@Integrations",
          description: "wrapper for [`axios`](https://github.com/axios/axios)"
        },
        {
          name: "useCookies",
          package: "integrations",
          docs: "https://vueuse.org/integrations/useCookies/",
          category: "@Integrations",
          description: "wrapper for [`universal-cookie`](https://www.npmjs.com/package/universal-cookie)"
        },
        {
          name: "useFocusTrap",
          package: "integrations",
          docs: "https://vueuse.org/integrations/useFocusTrap/",
          category: "@Integrations",
          description: "reactive wrapper for [`focus-trap`](https://github.com/focus-trap/focus-trap)"
        },
        {
          name: "useJwt",
          package: "integrations",
          docs: "https://vueuse.org/integrations/useJwt/",
          category: "@Integrations",
          description: "wrapper for [`jwt-decode`](https://github.com/auth0/jwt-decode)"
        },
        {
          name: "useNProgress",
          package: "integrations",
          docs: "https://vueuse.org/integrations/useNProgress/",
          category: "@Integrations",
          description: "reactive wrapper for [`nprogress`](https://github.com/rstacruz/nprogress)"
        },
        {
          name: "useQRCode",
          package: "integrations",
          docs: "https://vueuse.org/integrations/useQRCode/",
          category: "@Integrations",
          description: "wrapper for [`qrcode`](https://github.com/soldair/node-qrcode)"
        },
        {
          name: "from",
          package: "rxjs",
          docs: "https://vueuse.org/rxjs/from/",
          category: "@RxJS",
          description: "/ fromEvent"
        },
        {
          name: "toObserver",
          package: "rxjs",
          docs: "https://vueuse.org/rxjs/toObserver/",
          category: "@RxJS",
          description: "sugar function to convert a ref in an observer"
        },
        {
          name: "useObservable",
          package: "rxjs",
          docs: "https://vueuse.org/rxjs/useObservable/",
          category: "@RxJS",
          description: "use an Observable"
        },
        {
          name: "useSubscription",
          package: "rxjs",
          docs: "https://vueuse.org/rxjs/useSubscription/",
          category: "@RxJS",
          description: "uses subscriptions without worry about unsubscribing to it or memory leaks"
        },
        {
          name: "useAuth",
          package: "firebase",
          docs: "https://vueuse.org/firebase/useAuth/",
          category: "@Firebase",
          description: "reactive [Firebase Auth](https://firebase.google.com/docs/auth) binding"
        },
        {
          name: "useFirestore",
          package: "firebase",
          docs: "https://vueuse.org/firebase/useFirestore/",
          category: "@Firebase",
          description: "reactive [Firestore](https://firebase.google.com/docs/firestore) binding"
        },
        {
          name: "useRTDB",
          package: "firebase",
          docs: "https://vueuse.org/firebase/useRTDB/",
          category: "@Firebase",
          description: "reactive [Firebase Realtime Database](https://firebase.google.com/docs/database) binding"
        },
        {
          name: "useIpcRenderer",
          package: "electron",
          docs: "https://vueuse.org/electron/useIpcRenderer/",
          category: "@Electron",
          description: "provides [ipcRenderer](https://www.electronjs.org/docs/api/ipc-renderer) and it's all APIs"
        },
        {
          name: "useIpcRendererInvoke",
          package: "electron",
          docs: "https://vueuse.org/electron/useIpcRendererInvoke/",
          category: "@Electron",
          description: "reactive [ipcRenderer.invoke API](https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererinvokechannel-args) result"
        },
        {
          name: "useIpcRendererOn",
          package: "electron",
          docs: "https://vueuse.org/electron/useIpcRendererOn/",
          category: "@Electron",
          description: "use [ipcRenderer.on](https://www.electronjs.org/docs/api/ipc-renderer#ipcrendereronchannel-listener) with ease and [ipcRenderer.removeListener](https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererremovelistenerchannel-listener) automatically on unmounted"
        },
        {
          name: "useZoomFactor",
          package: "electron",
          docs: "https://vueuse.org/electron/useZoomFactor/",
          category: "@Electron",
          description: "reactive [WebFrame](https://www.electronjs.org/docs/api/web-frame#webframe) zoom factor"
        },
        {
          name: "useZoomLevel",
          package: "electron",
          docs: "https://vueuse.org/electron/useZoomLevel/",
          category: "@Electron",
          description: "reactive [WebFrame](https://www.electronjs.org/docs/api/web-frame#webframe) zoom level"
        }
      ]
    };
  }
});

// src/core/resolvers/antdv.ts
var matchComponents = [
  {
    pattern: /^Avatar/,
    styleDir: "avatar"
  },
  {
    pattern: /^AutoComplete/,
    styleDir: "auto-complete"
  },
  {
    pattern: /^Anchor/,
    styleDir: "anchor"
  },
  {
    pattern: /^Badge/,
    styleDir: "badge"
  },
  {
    pattern: /^Breadcrumb/,
    styleDir: "breadcrumb"
  },
  {
    pattern: /^Button/,
    styleDir: "button"
  },
  {
    pattern: /^Checkbox/,
    styleDir: "checkbox"
  },
  {
    pattern: /^Card/,
    styleDir: "card"
  },
  {
    pattern: /^Collapse/,
    styleDir: "collapse"
  },
  {
    pattern: /^Descriptions/,
    styleDir: "descriptions"
  },
  {
    pattern: /^RangePicker|^WeekPicker|^MonthPicker/,
    styleDir: "date-picker"
  },
  {
    pattern: /^Dropdown/,
    styleDir: "dropdown"
  },
  {
    pattern: /^Form/,
    styleDir: "form"
  },
  {
    pattern: /^InputNumber/,
    styleDir: "input-number"
  },
  {
    pattern: /^Input|^Textarea/,
    styleDir: "input"
  },
  {
    pattern: /^Statistic/,
    styleDir: "statistic"
  },
  {
    pattern: /^CheckableTag/,
    styleDir: "tag"
  },
  {
    pattern: /^Layout/,
    styleDir: "layout"
  },
  {
    pattern: /^Menu|^SubMenu/,
    styleDir: "menu"
  },
  {
    pattern: /^Table/,
    styleDir: "table"
  },
  {
    pattern: /^Radio/,
    styleDir: "radio"
  },
  {
    pattern: /^Image/,
    styleDir: "image"
  },
  {
    pattern: /^List/,
    styleDir: "list"
  },
  {
    pattern: /^Tab/,
    styleDir: "tabs"
  },
  {
    pattern: /^Mentions/,
    styleDir: "mentions"
  },
  {
    pattern: /^Step/,
    styleDir: "steps"
  },
  {
    pattern: /^Skeleton/,
    styleDir: "skeleton"
  },
  {
    pattern: /^Select/,
    styleDir: "select"
  },
  {
    pattern: /^TreeSelect/,
    styleDir: "tree-select"
  },
  {
    pattern: /^Tree|^DirectoryTree/,
    styleDir: "tree"
  },
  {
    pattern: /^Typography/,
    styleDir: "typography"
  },
  {
    pattern: /^Timeline/,
    styleDir: "timeline"
  },
  {
    pattern: /^Upload/,
    styleDir: "upload"
  }
];
function getStyleDir(compName) {
  let styleDir;
  const total = matchComponents.length;
  for (let i = 0; i < total; i++) {
    const matcher = matchComponents[i];
    if (compName.match(matcher.pattern)) {
      styleDir = matcher.styleDir;
      break;
    }
  }
  if (!styleDir)
    styleDir = kebabCase(compName);
  return styleDir;
}
function getSideEffects(compName, options) {
  const {
    importStyle = true,
    importLess = false
  } = options;
  if (!importStyle)
    return;
  const lib = options.cjs ? "lib" : "es";
  if (importStyle === "less" || importLess) {
    const styleDir = getStyleDir(compName);
    return `ant-design-vue/${lib}/${styleDir}/style`;
  } else {
    const styleDir = getStyleDir(compName);
    return `ant-design-vue/${lib}/${styleDir}/style/css`;
  }
}
var primitiveNames = ["Affix", "Anchor", "AnchorLink", "AutoComplete", "AutoCompleteOptGroup", "AutoCompleteOption", "Alert", "Avatar", "AvatarGroup", "BackTop", "Badge", "BadgeRibbon", "Breadcrumb", "BreadcrumbItem", "BreadcrumbSeparator", "Button", "ButtonGroup", "Calendar", "Card", "CardGrid", "CardMeta", "Collapse", "CollapsePanel", "Carousel", "Cascader", "Checkbox", "CheckboxGroup", "Col", "Comment", "ConfigProvider", "DatePicker", "MonthPicker", "WeekPicker", "RangePicker", "QuarterPicker", "Descriptions", "DescriptionsItem", "Divider", "Dropdown", "DropdownButton", "Drawer", "Empty", "Form", "FormItem", "FormItemRest", "Grid", "Input", "InputGroup", "InputPassword", "InputSearch", "Textarea", "Image", "ImagePreviewGroup", "InputNumber", "Layout", "LayoutHeader", "LayoutSider", "LayoutFooter", "LayoutContent", "List", "ListItem", "ListItemMeta", "Menu", "MenuDivider", "MenuItem", "MenuItemGroup", "SubMenu", "Mentions", "MentionsOption", "Modal", "Statistic", "StatisticCountdown", "PageHeader", "Pagination", "Popconfirm", "Popover", "Progress", "Radio", "RadioButton", "RadioGroup", "Rate", "Result", "Row", "Select", "SelectOptGroup", "SelectOption", "Skeleton", "SkeletonButton", "SkeletonAvatar", "SkeletonInput", "SkeletonImage", "Slider", "Space", "Spin", "Steps", "Step", "Switch", "Table", "TableColumn", "TableColumnGroup", "TableSummary", "TableSummaryRow", "TableSummaryCell", "Transfer", "Tree", "TreeNode", "DirectoryTree", "TreeSelect", "TreeSelectNode", "Tabs", "TabPane", "Tag", "CheckableTag", "TimePicker", "TimeRangePicker", "Timeline", "TimelineItem", "Tooltip", "Typography", "TypographyLink", "TypographyParagraph", "TypographyText", "TypographyTitle", "Upload", "UploadDragger", "LocaleProvider"];
var prefix = "A";
var antdvNames;
function genAntdNames(primitiveNames2) {
  antdvNames = new Set(primitiveNames2.map((name) => `${prefix}${name}`));
}
genAntdNames(primitiveNames);
function isAntdv(compName) {
  return antdvNames.has(compName);
}
function AntDesignVueResolver(options = {}) {
  return {
    type: "component",
    resolve: (name) => {
      var _a;
      if (options.resolveIcons && name.match(/(Outlined|Filled|TwoTone)$/)) {
        return {
          importName: name,
          path: "@ant-design/icons-vue"
        };
      }
      if (isAntdv(name) && !((_a = options == null ? void 0 : options.exclude) == null ? void 0 : _a.includes(name))) {
        const importName = name.slice(1);
        const { cjs = false } = options;
        const path = `ant-design-vue/${cjs ? "lib" : "es"}`;
        return {
          importName,
          path,
          sideEffects: getSideEffects(importName, options)
        };
      }
    }
  };
}

// node_modules/.pnpm/compare-versions@4.1.3/node_modules/compare-versions/index.mjs
function compareVersions(v1, v2) {
  const n1 = validateAndParse(v1);
  const n2 = validateAndParse(v2);
  const p1 = n1.pop();
  const p2 = n2.pop();
  const r = compareSegments(n1, n2);
  if (r !== 0)
    return r;
  if (p1 && p2) {
    return compareSegments(p1.split("."), p2.split("."));
  } else if (p1 || p2) {
    return p1 ? -1 : 1;
  }
  return 0;
}
var validate = (v) => typeof v === "string" && /^[v\d]/.test(v) && semver.test(v);
var compare = (v1, v2, operator) => {
  assertValidOperator(operator);
  const res = compareVersions(v1, v2);
  return operatorResMap[operator].includes(res);
};
var satisfies = (v, r) => {
  const m = r.match(/^([<>=~^]+)/);
  const op = m ? m[1] : "=";
  if (op !== "^" && op !== "~")
    return compare(v, r, op);
  const [v1, v2, v3] = validateAndParse(v);
  const [r1, r2, r3] = validateAndParse(r);
  if (compareStrings(v1, r1) !== 0)
    return false;
  if (op === "^") {
    return compareSegments([v2, v3], [r2, r3]) >= 0;
  }
  if (compareStrings(v2, r2) !== 0)
    return false;
  return compareStrings(v3, r3) >= 0;
};
compareVersions.validate = validate;
compareVersions.compare = compare;
compareVersions.sastisfies = satisfies;
var semver = /^[v^~<>=]*?(\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+))?(?:-([\da-z\-]+(?:\.[\da-z\-]+)*))?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;
var validateAndParse = (v) => {
  if (typeof v !== "string") {
    throw new TypeError("Invalid argument expected string");
  }
  const match = v.match(semver);
  if (!match) {
    throw new Error(`Invalid argument not valid semver ('${v}' received)`);
  }
  match.shift();
  return match;
};
var isWildcard = (s) => s === "*" || s === "x" || s === "X";
var tryParse = (v) => {
  const n = parseInt(v, 10);
  return isNaN(n) ? v : n;
};
var forceType = (a, b) => typeof a !== typeof b ? [String(a), String(b)] : [a, b];
var compareStrings = (a, b) => {
  if (isWildcard(a) || isWildcard(b))
    return 0;
  const [ap, bp] = forceType(tryParse(a), tryParse(b));
  if (ap > bp)
    return 1;
  if (ap < bp)
    return -1;
  return 0;
};
var compareSegments = (a, b) => {
  for (let i = 0; i < Math.max(a.length, b.length); i++) {
    const r = compareStrings(a[i] || 0, b[i] || 0);
    if (r !== 0)
      return r;
  }
  return 0;
};
var operatorResMap = {
  ">": [1],
  ">=": [0, 1],
  "=": [0],
  "<=": [-1, 0],
  "<": [-1]
};
var allowedOperators = Object.keys(operatorResMap);
var assertValidOperator = (op) => {
  if (typeof op !== "string") {
    throw new TypeError(`Invalid operator type, expected string but got ${typeof op}`);
  }
  if (allowedOperators.indexOf(op) === -1) {
    throw new Error(`Invalid operator, expected one of ${allowedOperators.join("|")}`);
  }
};

// src/core/resolvers/element-plus.ts
function getSideEffectsLegacy(partialName, options) {
  const { importStyle } = options;
  if (!importStyle)
    return;
  if (importStyle === "sass") {
    return [
      "element-plus/packages/theme-chalk/src/base.scss",
      `element-plus/packages/theme-chalk/src/${partialName}.scss`
    ];
  } else if (importStyle === true || importStyle === "css") {
    return [
      "element-plus/lib/theme-chalk/base.css",
      `element-plus/lib/theme-chalk/el-${partialName}.css`
    ];
  }
}
function getSideEffects2(dirName, options) {
  const { importStyle, ssr } = options;
  const themeFolder = "element-plus/theme-chalk";
  const esComponentsFolder = "element-plus/es/components";
  if (importStyle === "sass")
    return ssr ? `${themeFolder}/src/${dirName}.scss` : `${esComponentsFolder}/${dirName}/style/index`;
  else if (importStyle === true || importStyle === "css")
    return ssr ? `${themeFolder}/el-${dirName}.css` : `${esComponentsFolder}/${dirName}/style/css`;
}
function resolveComponent(name, options) {
  if (!name.match(/^El[A-Z]/))
    return;
  const partialName = kebabCase(name.slice(2));
  const { version, ssr } = options;
  if (compareVersions.compare(version, "1.1.0-beta.1", ">=")) {
    return {
      importName: name,
      path: `element-plus/${ssr ? "lib" : "es"}`,
      sideEffects: getSideEffects2(partialName, options)
    };
  } else if (compareVersions.compare(version, "1.0.2-beta.28", ">=")) {
    return {
      path: `element-plus/es/el-${partialName}`,
      sideEffects: getSideEffectsLegacy(partialName, options)
    };
  } else {
    return {
      path: `element-plus/lib/el-${partialName}`,
      sideEffects: getSideEffectsLegacy(partialName, options)
    };
  }
}
function resolveDirective(name, options) {
  if (!options.directives)
    return;
  const directives = {
    Loading: { importName: "ElLoadingDirective", styleName: "loading" },
    Popover: { importName: "ElPopoverDirective", styleName: "popover" },
    InfiniteScroll: { importName: "ElInfiniteScroll", styleName: "infinite-scroll" }
  };
  const directive = directives[name];
  if (!directive)
    return;
  const { version, ssr } = options;
  if (compareVersions.compare(version, "1.1.0-beta.1", ">=")) {
    return {
      importName: directive.importName,
      path: `element-plus/${ssr ? "lib" : "es"}`,
      sideEffects: getSideEffects2(directive.styleName, options)
    };
  }
}
function ElementPlusResolver(options = {}) {
  let optionsResolved;
  async function resolveOptions() {
    if (optionsResolved)
      return optionsResolved;
    optionsResolved = __spreadValues({
      ssr: false,
      version: await getPkgVersion("element-plus", "1.1.0-beta.21"),
      importStyle: "css",
      directives: true
    }, options);
    return optionsResolved;
  }
  return [
    {
      type: "component",
      resolve: async (name) => {
        return resolveComponent(name, await resolveOptions());
      }
    },
    {
      type: "directive",
      resolve: async (name) => {
        return resolveDirective(name, await resolveOptions());
      }
    }
  ];
}

// src/core/resolvers/element-ui.ts
function getSideEffects3(partialName, options) {
  const { importStyle = "css" } = options;
  if (!importStyle)
    return;
  if (importStyle === "sass") {
    return [
      "element-ui/packages/theme-chalk/src/base.scss",
      `element-ui/packages/theme-chalk/src/${partialName}.scss`
    ];
  } else {
    return [
      "element-ui/lib/theme-chalk/base.css",
      `element-ui/lib/theme-chalk/${partialName}.css`
    ];
  }
}
function ElementUiResolver(options = {}) {
  return {
    type: "component",
    resolve: (name) => {
      if (name.startsWith("El")) {
        const compName = name.slice(2);
        const partialName = kebabCase(compName);
        if (partialName === "collapse-transition") {
          return {
            path: `element-ui/lib/transitions/${partialName}`
          };
        }
        return {
          path: `element-ui/lib/${partialName}`,
          sideEffects: getSideEffects3(partialName, options)
        };
      }
    }
  };
}

// src/core/resolvers/headless-ui.ts
var components = [
  "Dialog",
  "DialogDescription",
  "DialogOverlay",
  "DialogTitle",
  "Disclosure",
  "DisclosureButton",
  "DisclosurePanel",
  "FocusTrap",
  "Listbox",
  "ListboxButton",
  "ListboxLabel",
  "ListboxOption",
  "ListboxOptions",
  "Menu",
  "MenuButton",
  "MenuItem",
  "MenuItems",
  "Popover",
  "PopoverButton",
  "PopoverGroup",
  "PopoverOverlay",
  "PopoverPanel",
  "Portal",
  "PortalGroup",
  "RadioGroup",
  "RadioGroupDescription",
  "RadioGroupLabel",
  "RadioGroupOption",
  "Switch",
  "SwitchDescription",
  "SwitchGroup",
  "SwitchLabel",
  "TransitionChild",
  "TransitionRoot",
  "TabGroup",
  "TabList",
  "Tab",
  "TabPanels",
  "TabPanel"
];
function HeadlessUiResolver({
  prefix: prefix2 = ""
}) {
  return {
    type: "component",
    resolve: (name) => {
      if (name.startsWith(prefix2)) {
        const componentName = name.replace(new RegExp(`^(${prefix2})`), "");
        if (components.includes(componentName)) {
          return {
            importName: componentName,
            path: "@headlessui/vue"
          };
        }
      }
    }
  };
}

// src/core/resolvers/idux.ts
var specialComponents = {
  CdkVirtualScroll: "scroll",
  IxAutoComplete: "auto-complete",
  IxBackTop: "back-top",
  IxDatePicker: "date-picker",
  IxCol: "grid",
  IxRow: "grid",
  IxInputNumber: "input-number",
  IxTab: "tabs",
  IxTreeSelect: "tree-select",
  IxTimePicker: "time-picker"
};
function IduxResolver(options = {}) {
  return {
    type: "component",
    resolve: (name) => {
      const { importStyle, exclude = [] } = options;
      if (exclude.includes(name))
        return;
      const packageName = getPackageName(name);
      if (!packageName)
        return;
      let dirname = specialComponents[name];
      if (!dirname) {
        const nameIndex = packageName === "pro" ? 2 : 1;
        dirname = kebabCase(name).split("-")[nameIndex];
      }
      const path = `@idux/${packageName}/${dirname}`;
      let sideEffects;
      if (packageName !== "cdk" && importStyle)
        sideEffects = `${path}/style/themes/${importStyle === "css" ? "default_css" : "default"}`;
      return { importName: name, path, sideEffects };
    }
  };
}
function getPackageName(name) {
  let packageName;
  if (name.match(/^Cdk[A-Z]/))
    packageName = "cdk";
  else if (name.match(/^IxPro[A-Z]/))
    packageName = "pro";
  else if (name.match(/^Ix[A-Z]/))
    packageName = "components";
  return packageName;
}

// src/core/resolvers/inkline.ts
function InklineResolver() {
  return {
    type: "component",
    resolve: (name) => {
      if (name.match(/^I[A-Z]/)) {
        return {
          importName: name,
          path: "@inkline/inkline"
        };
      }
    }
  };
}

// src/core/resolvers/naive-ui.ts
function NaiveUiResolver() {
  return {
    type: "component",
    resolve: (name) => {
      if (name.match(/^N[A-Z]/))
        return { importName: name, path: "naive-ui" };
    }
  };
}

// src/core/resolvers/prime-vue.ts
var components2 = [
  "Accordion",
  "AccordionTab",
  "AutoComplete",
  "Avatar",
  "AvatarGroup",
  "Badge",
  "BlockUI",
  "Breadcrumb",
  "Button",
  "Calendar",
  "Card",
  "Carousel",
  "CascadeSelect",
  "Chart",
  "Checkbox",
  "Chip",
  "Chips",
  "ColorPicker",
  "Column",
  "ColumnGroup",
  "ContextMenu",
  "DataTable",
  "DataView",
  "DataViewLayoutOptions",
  "DeferredContent",
  "Dialog",
  "Divider",
  "Dock",
  "Dropdown",
  "Editor",
  "Fieldset",
  "FileUpload",
  "FullCalendar",
  "Galleria",
  "Image",
  "InlineMessage",
  "Inplace",
  "InputMask",
  "InputNumber",
  "InputSwitch",
  "InputText",
  "Knob",
  "Listbox",
  "MegaMenu",
  "Menu",
  "Menubar",
  "Message",
  "MultiSelect",
  "OrderList",
  "OrganizationChart",
  "OverlayPanel",
  "Paginator",
  "Panel",
  "PanelMenu",
  "Password",
  "PickList",
  "ProgressBar",
  "ProgressSpinner",
  "RadioButton",
  "Rating",
  "ScrollPanel",
  "ScrollTop",
  "SelectButton",
  "Sidebar",
  "Skeleton",
  "Slider",
  "SpeedDial",
  "SplitButton",
  "Splitter",
  "SplitterPanel",
  "Steps",
  "TabMenu",
  "TabPanel",
  "TabView",
  "Tag",
  "Terminal",
  "TerminalService",
  "Textarea",
  "TieredMenu",
  "Timeline",
  "Timelist",
  "ToggleButton",
  "Toolbar",
  "Tree",
  "TreeSelect",
  "TreeTable",
  "TriStateCheckbox",
  "VirtualScroller"
];
function PrimeVueResolver(options = {}) {
  return {
    type: "component",
    resolve: (name) => {
      const sideEffects = [];
      if (options.importStyle)
        sideEffects.push("primevue/resources/primevue.min.css");
      if (options.importIcons)
        sideEffects.push("primeicons/primeicons.css");
      if (options.importTheme) {
        sideEffects.push(`primevue/resources/themes/${options.importTheme}/theme.css`);
      }
      if (options.prefix) {
        if (!name.startsWith(options.prefix))
          return;
        name = name.substring(options.prefix.length);
      }
      if (components2.includes(name)) {
        return {
          path: `primevue/${name.toLowerCase()}`,
          sideEffects
        };
      }
    }
  };
}

// src/core/resolvers/vant.ts
function getSideEffects4(dirName, options) {
  const { importStyle = true } = options;
  if (!importStyle)
    return;
  if (importStyle === "less")
    return `vant/es/${dirName}/style/less`;
  if (importStyle === "css")
    return `vant/es/${dirName}/style/index`;
  return `vant/es/${dirName}/style/index`;
}
function VantResolver(options = {}) {
  return {
    type: "component",
    resolve: (name) => {
      if (name.startsWith("Van")) {
        const partialName = name.slice(3);
        return {
          importName: partialName,
          path: "vant/es",
          sideEffects: getSideEffects4(kebabCase(partialName), options)
        };
      }
    }
  };
}

// src/core/resolvers/varlet-ui.ts
function getResolved(name, options) {
  const {
    importStyle = "css",
    importCss = true,
    importLess
  } = options;
  const sideEffects = [];
  if (importStyle || importCss) {
    if (importStyle === "less" || importLess)
      sideEffects.push(`@varlet/ui/es/${kebabCase(name)}/style/less.js`);
    else
      sideEffects.push(`@varlet/ui/es/${kebabCase(name)}/style`);
  }
  return {
    path: "@varlet/ui",
    importName: `_${name}Component`,
    sideEffects
  };
}
function VarletUIResolver(options = {}) {
  return [
    {
      type: "component",
      resolve: (name) => {
        if (name.startsWith("Var"))
          return getResolved(name.slice(3), options);
      }
    },
    {
      type: "directive",
      resolve: (name) => {
        const { directives = true } = options;
        if (!directives)
          return;
        return getResolved(name, options);
      }
    }
  ];
}

// src/core/resolvers/veui.ts
import { join, normalize } from "path";
var VEUI_PACKAGE_NAME = "veui";
var components3;
function VeuiResolver(options) {
  const { alias = VEUI_PACKAGE_NAME } = options;
  if (!components3) {
    try {
      const componentsData = __require(`${alias}/components.json`);
      components3 = new Set(componentsData.map(({ name }) => name));
    } catch (e) {
      throw new Error("[unplugin-vue-components:veui] VEUI is not installed");
    }
  }
  return {
    type: "component",
    resolve: (name) => {
      if (name.match(/^Veui[A-Z]/)) {
        const componentName = name.slice(4);
        if (!components3.has(componentName))
          return;
        const sideEffects = getSideEffects5(componentName, options);
        return { importName: componentName, path: alias, sideEffects };
      }
    }
  };
}
var formatters = {
  "kebab-case": kebabCase,
  "camelCase": camelCase,
  "PascalCase": pascalCase
};
var peerPaths = new Map();
function assertPeerPath(peerPath) {
  if (!peerPaths.has(peerPath)) {
    try {
      resolveImportPath(peerPath);
      peerPaths.set(peerPath, true);
    } catch (e) {
      peerPaths.set(peerPath, false);
    }
  }
  return peerPaths.get(peerPath);
}
function getSideEffects5(name, {
  alias = VEUI_PACKAGE_NAME,
  modules = [],
  locale = "zh-Hans",
  global = []
}) {
  const localeModules = (locale ? Array.isArray(locale) ? locale : [locale] : []).map((locale2) => `${alias}/locale/${locale2}/${name}.js`);
  const peerModules = modules.map(({
    package: pack,
    path = "components",
    fileName = "{module}.css",
    transform = "kebab-case"
  }) => {
    const peer = transform ? formatters[transform](name) : name;
    const file = fileName.replace(/\$?\{module\}/g, peer);
    return normalize(join(pack, path, file));
  });
  return [...localeModules, ...global, ...peerModules].filter(assertPeerPath);
}

// src/core/resolvers/view-ui.ts
function getSideEffects6(componentName) {
  const sideEffects = [
    "view-design/dist/styles/iview.css",
    "popper.js/dist/umd/popper.js"
  ];
  if (/^Table|^Slider|^Tab/.test(componentName))
    sideEffects.push("element-resize-detector");
  if (/^Date/.test(componentName))
    sideEffects.push("js-calendar");
  return sideEffects;
}
var matchComponents2 = [
  {
    pattern: /^List/,
    compDir: "list"
  }
];
function getCompDir(compName) {
  let compPath;
  const total = matchComponents2.length;
  for (let i = 0; i < total; i++) {
    const matcher = matchComponents2[i];
    if (compName.match(matcher.pattern)) {
      compPath = `${matcher.compDir}/${kebabCase(compName)}.vue`;
      break;
    }
  }
  if (!compPath)
    compPath = kebabCase(compName);
  return compPath;
}
function ViewUiResolver() {
  return {
    type: "component",
    resolve: (name) => {
      if (name.match(/^I[A-Z]/)) {
        const compName = name.slice(1);
        return {
          path: `view-design/src/components/${getCompDir(compName)}`,
          sideEffects: getSideEffects6(compName)
        };
      }
    }
  };
}

// src/core/resolvers/vuetify.ts
function VuetifyResolver() {
  return {
    type: "component",
    resolve: (name) => {
      if (name.match(/^V[A-Z]/))
        return { importName: name, path: "vuetify/lib" };
    }
  };
}

// src/core/resolvers/vueuse.ts
var components4;
function VueUseComponentsResolver() {
  return {
    type: "component",
    resolve: (name) => {
      if (!components4) {
        try {
          const indexesJson = require_indexes();
          components4 = indexesJson.functions.filter((i) => i.component && i.name).map(({ name: name2 }) => name2[0].toUpperCase() + name2.slice(1));
        } catch (error) {
          components4 = [];
        }
      }
      if (components4 && components4.includes(name))
        return { importName: name, path: "@vueuse/components" };
    }
  };
}

// src/core/resolvers/quasar.ts
function QuasarResolver() {
  return {
    type: "component",
    resolve: (name) => {
      let components5 = [];
      try {
        components5 = __require("quasar/dist/transforms/api-list.json");
      } catch (e) {
      }
      if (components5.includes(name))
        return { importName: name, path: "quasar" };
    }
  };
}

// src/core/resolvers/devui.ts
var LIB_NAME = "vue-devui";
var findStyle = (name) => {
  if (!name || !Array.isArray(name))
    return `${LIB_NAME}/${name}/style.css`;
};
var effectComponentMaps = {
  "row,col": "grid",
  "aside,content,footer,header,layout": "layout",
  "overlay,fixed-overlay,flexible-overlay": "overlay"
};
var effectDirectiveMaps = {
  Ripple: "",
  Draggable: "",
  Droppable: "",
  Loading: "loading",
  ImagePreview: "image-preview"
};
var effectComponentKeys = Object.keys(effectComponentMaps);
function getSideEffects7(name) {
  const match = effectComponentKeys.find((key) => key.includes(name));
  return match && effectComponentMaps[match] && findStyle(match);
}
function componentsResolver(name) {
  if (!name.match(/^D[A-Z]/))
    return;
  const resolveId = kebabCase(name = name.slice(1));
  return {
    path: LIB_NAME,
    importName: name,
    sideEffects: getSideEffects7(resolveId)
  };
}
function directivesResolver(name) {
  if (!(name in effectDirectiveMaps))
    return;
  return {
    path: LIB_NAME,
    importName: `${name}Directive`,
    sideEffects: findStyle(effectDirectiveMaps[name])
  };
}
function DevUiResolver(options = {}) {
  const config = __spreadValues({ directives: true, importStyle: true }, options);
  const resolvers = [
    { type: "component", resolve: componentsResolver }
  ];
  if (config.directives)
    resolvers.push({ type: "directive", resolve: directivesResolver });
  return resolvers;
}

// src/core/resolvers/arco.ts
var matchComponents3 = [
  {
    pattern: /^AnchorLink$/,
    componentDir: "anchor"
  },
  {
    pattern: /^AvatarGroup$/,
    componentDir: "avatar"
  },
  {
    pattern: /^BreadcrumbItem$/,
    componentDir: "breadcrumb"
  },
  {
    pattern: /^ButtonGroup$/,
    componentDir: "button"
  },
  {
    pattern: /^(CardMeta|CardGrid)$/,
    componentDir: "card"
  },
  {
    pattern: /^CarouselItem$/,
    componentDir: "carousel"
  },
  {
    pattern: /^CheckboxGroup$/,
    componentDir: "checkbox"
  },
  {
    pattern: /^CollapseItem$/,
    componentDir: "collapse"
  },
  {
    pattern: /^(WeekPicker|MonthPicker|YearPicker|QuarterPicker|RangePicker)$/,
    componentDir: "date-picker"
  },
  {
    pattern: /^(Doption|Dgroup|Dsubmenu)$/,
    componentDir: "dropdown"
  },
  {
    pattern: /^FormItem$/,
    componentDir: "form"
  },
  {
    pattern: /^(Col|Row|GridItem)$/,
    componentDir: "grid"
  },
  {
    pattern: /^(ImagePreview|ImagePreviewGroup)$/,
    componentDir: "image"
  },
  {
    pattern: /^(InputGroup|InputSearch|InputPassword)$/,
    componentDir: "input"
  },
  {
    pattern: /^(LayoutHeader|LayoutContent|LayoutFooter|LayoutSider)$/,
    componentDir: "layout"
  },
  {
    pattern: /^(ListItem|ListItemMeta)$/,
    componentDir: "list"
  },
  {
    pattern: /^(MenuItem|MenuItemGroup|SubMenu)$/,
    componentDir: "menu"
  },
  {
    pattern: /^RadioGroup$/,
    componentDir: "radio"
  },
  {
    pattern: /^(Option|Optgroup)$/,
    componentDir: "select"
  },
  {
    pattern: /^(SkeletonLine|SkeletonShape)$/,
    componentDir: "table"
  },
  {
    pattern: /^Countdown$/,
    componentDir: "statistic"
  },
  {
    pattern: /^Step$/,
    componentDir: "steps"
  },
  {
    pattern: /^(Thead|Td|Th|Tr|Tbody|TableColumn)$/,
    componentDir: "table"
  },
  {
    pattern: /^TabPane$/,
    componentDir: "tabs"
  },
  {
    pattern: /^TimelineItem$/,
    componentDir: "timeline"
  },
  {
    pattern: /^(TypographyParagraph|TypographyTitle|TypographyText)$/,
    componentDir: "typography"
  }
];
function getComponentStyleDir(importName, importStyle) {
  if (["ConfigProvider", "Icon"].includes(importName))
    return void 0;
  let componentDir = kebabCase(importName);
  for (const item of matchComponents3) {
    if (item.pattern.test(importName)) {
      componentDir = item.componentDir;
      break;
    }
  }
  if (importStyle === "less")
    return `@arco-design/web-vue/es/${componentDir}/style/index.js`;
  if (importStyle === "css" || importStyle)
    return `@arco-design/web-vue/es/${componentDir}/style/css.js`;
}
function ArcoResolver(options = {}) {
  return {
    type: "component",
    resolve: (name) => {
      var _a;
      if (options.resolveIcons && name.match(/^Icon/)) {
        return {
          importName: name,
          path: "@arco-design/web-vue/es/icon"
        };
      }
      if (name.match(/^A/)) {
        const importStyle = (_a = options.importStyle) != null ? _a : "css";
        const importName = name.slice(1);
        return {
          importName,
          path: "@arco-design/web-vue",
          sideEffects: getComponentStyleDir(importName, importStyle)
        };
      }
    }
  };
}

// src/core/resolvers/tdesign.ts
function getSideEffects8(importName, options) {
  const { library = "vue", importStyle = "css" } = options;
  const fileName = kebabCase(importName);
  if (!importStyle)
    return;
  if (fileName === "config-provider")
    return;
  if (importStyle === "less")
    return `tdesign-${library}/esm/${fileName}/style`;
  return `tdesign-${library}/es/${fileName}/style`;
}
function TDesignResolver(options = {}) {
  return {
    type: "component",
    resolve: (name) => {
      const { library = "vue" } = options;
      if (options.resolveIcons && name.match(/[a-z]Icon$/)) {
        return {
          importName: name,
          path: `tdesign-icons-${library}`
        };
      }
      if (name.match(/^T[A-Z]/)) {
        const importName = name.slice(1);
        return {
          importName,
          path: `tdesign-${library}`,
          sideEffects: getSideEffects8(importName, options)
        };
      }
    }
  };
}
export {
  AntDesignVueResolver,
  ArcoResolver,
  DevUiResolver,
  ElementPlusResolver,
  ElementUiResolver,
  HeadlessUiResolver,
  IduxResolver,
  InklineResolver,
  LibraryResolver,
  NaiveUiResolver,
  PrimeVueResolver,
  QuasarResolver,
  TDesignResolver,
  VantResolver,
  VarletUIResolver,
  VeuiResolver,
  ViewUiResolver,
  VueUseComponentsResolver,
  VuetifyResolver,
  getResolved,
  tryLoadVeturTags
};
