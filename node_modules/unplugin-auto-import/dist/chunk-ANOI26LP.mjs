import {
  __spreadProps,
  __spreadValues,
  presets
} from "./chunk-OKMRMQOI.mjs";

// src/index.ts
import { promises as fs } from "fs";
import { createUnplugin } from "unplugin";
import { throttle } from "@antfu/utils";

// src/core/options.ts
import { resolve } from "path";
import { toArray } from "@antfu/utils";
import { createFilter } from "@rollup/pluginutils";
import { isPackageExists } from "local-pkg";
function resolveOptions(options = {}, root = process.cwd()) {
  const imports = flattenImportsMap(options.imports, options.presetOverriding);
  const {
    dts = isPackageExists("typescript")
  } = options;
  const eslintrc = options.eslintrc || {};
  eslintrc.enabled = eslintrc.enabled === void 0 ? false : eslintrc.enabled;
  eslintrc.filepath = eslintrc.filepath || "./.eslintrc-auto-import.json";
  eslintrc.globalsPropValue = eslintrc.globalsPropValue === void 0 ? true : eslintrc.globalsPropValue;
  const resolved = __spreadProps(__spreadValues({
    sourceMap: false,
    resolvedImports: {},
    presetOverriding: false,
    ignore: []
  }, options), {
    dts: dts === false ? false : dts === true ? resolve(root, "auto-imports.d.ts") : resolve(root, dts),
    imports,
    resolvers: options.resolvers ? [options.resolvers].flat(2) : [],
    idFilter: createFilter(options.include || [/\.[jt]sx?$/, /\.vue$/, /\.vue\?vue/, /\.svelte$/], options.exclude || [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/]),
    eslintrc
  });
  return resolved;
}
function flattenImportsMap(map, overriding = false) {
  const flat = {};
  toArray(map).forEach((definition) => {
    if (typeof definition === "string") {
      if (!presets[definition])
        throw new Error(`[auto-import] preset ${definition} not found`);
      const preset = presets[definition];
      definition = typeof preset === "function" ? preset() : preset;
    }
    for (const mod of Object.keys(definition)) {
      for (const id of definition[mod]) {
        const meta = {
          path: mod
        };
        let name;
        if (Array.isArray(id)) {
          name = id[1];
          meta.importName = id[0];
        } else {
          name = id;
          meta.importName = id;
        }
        if (flat[name] && !overriding)
          throw new Error(`[auto-import] identifier ${name} already defined with ${flat[name].path}`);
        flat[name] = meta;
      }
    }
  });
  return flat;
}

// src/core/transform.ts
import MagicString from "magic-string";
var excludeRE = [
  /\bimport\s*([\s\S]+?)\s*from\b/g,
  /\bfunction\s*([\w_$]+?)\s*\(/g,
  /\b(?:const|let|var)\s+?(\[[\s\S]*?\]|\{[\s\S]*?\}|[\s\S]+?)\s*?[=;\n]/g
];
var matchRE = /(?<![\w_$/)]\.)([\w_$]+?)[^\w_${]/g;
var importAsRE = /^.*\sas\s+/;
var seperatorRE = /[,[\]{}\n]/g;
var multilineCommentsRE = /\/\*\s(.|[\r\n])*?\*\//gm;
var singlelineCommentsRE = /\/\/\s.*/g;
var templateLiteralRE = /\$\{(.*?)\}/g;
var quotesRE = [
  /(["'])((?:\\\1|(?!\1)|.|\r)*?)\1/gm,
  /([`])((?:\\\1|(?!\1)|.|\n|\r)*?)\1/gm
];
function stripeCommentsAndStrings(code) {
  return code.replace(multilineCommentsRE, "").replace(singlelineCommentsRE, "").replace(templateLiteralRE, "` + $1 + `").replace(quotesRE[0], '""').replace(quotesRE[1], "``");
}
async function transform(code, id, {
  imports,
  sourceMap,
  resolvers,
  resolvedImports = {},
  ignore = []
}) {
  const striped = stripeCommentsAndStrings(code);
  const identifiers = new Set(Array.from(striped.matchAll(matchRE)).map((i) => i[1]));
  ignore.forEach((i) => {
    if (typeof i === "string") {
      identifiers.delete(i);
    } else {
      identifiers.forEach((id2) => {
        if (id2.match(i))
          identifiers.delete(id2);
      });
    }
  });
  if (!identifiers.size)
    return null;
  for (const regex of excludeRE) {
    Array.from(striped.matchAll(regex)).flatMap((i) => {
      var _a, _b;
      return [
        ...((_a = i[1]) == null ? void 0 : _a.split(seperatorRE)) || [],
        ...((_b = i[2]) == null ? void 0 : _b.split(seperatorRE)) || []
      ];
    }).map((i) => i.replace(importAsRE, "").trim()).forEach((i) => identifiers.delete(i));
  }
  if (!identifiers.size)
    return null;
  const modules = {};
  const addToModules = (info) => {
    if (!modules[info.path])
      modules[info.path] = [info];
    else
      modules[info.path].push(info);
  };
  for (const name of Array.from(identifiers)) {
    let info = getOwn(resolvedImports, name) || getOwn(imports, name);
    if (!info && (resolvers == null ? void 0 : resolvers.length)) {
      const resolved = await firstMatchedResolver(resolvers, name);
      if (resolved) {
        if (typeof resolved === "string") {
          info = {
            path: resolved,
            importName: "default"
          };
        } else {
          info = resolved;
        }
        resolvedImports[name] = info;
      }
    }
    if (!info || !info.path)
      continue;
    addToModules({
      path: info.path,
      importName: info.importName,
      name
    });
    if (info.sideEffects) {
      const infos = [info.sideEffects].flat(1).map((info2) => {
        if (typeof info2 === "string")
          return { path: info2 };
        return info2;
      });
      infos.forEach((info2) => addToModules(info2));
    }
  }
  if (!Object.keys(modules).length)
    return;
  const importStatements = Object.entries(modules).map(([moduleName, infos]) => {
    const imports2 = [];
    const namedImports = [];
    infos.forEach(({ name, importName }) => {
      if (name) {
        if (importName === "*")
          imports2.push(`* as ${name}`);
        else
          namedImports.push(importName && name !== importName ? `${importName} as ${name}` : name);
      }
    });
    if (namedImports.length)
      imports2.push(`{ ${namedImports.join(", ")} }`);
    return `import ${imports2.length > 0 ? `${imports2.join(", ")} from ` : ""}'${moduleName}';`;
  }).join("");
  const s = new MagicString(code);
  s.prependLeft(0, importStatements);
  return {
    code: s.toString(),
    map: sourceMap ? s.generateMap({ source: id, includeContent: true }) : null
  };
}
async function firstMatchedResolver(resolvers, name) {
  for (const resolver of resolvers) {
    if (typeof resolver === "object" && resolver.type === "directive") {
      if (name.startsWith("v"))
        name = name.replace("v", "");
      else
        continue;
    }
    const resolved = await (typeof resolver === "function" ? resolver(name) : resolver.resolve(name));
    if (resolved)
      return resolved;
  }
}
var hasOwnProperty = Object.prototype.hasOwnProperty;
function getOwn(object, key) {
  return hasOwnProperty.call(object, key) ? object[key] : void 0;
}

// src/core/dts.ts
function generateDeclaration(imports, resolvedImports = {}) {
  const body = [
    ...Object.entries(imports),
    ...Object.entries(resolvedImports)
  ].sort((a, b) => a[0].localeCompare(b[0])).map(([name, info]) => `  const ${name}: typeof import('${info.path}')${info.importName !== "*" ? `['${info.importName || name}']` : ""}`).join("\n");
  return `// Generated by 'unplugin-auto-import'
// We suggest you to commit this file into source control
declare global {
${body}
}
export {}
`;
}

// src/core/eslintrc.ts
function generateESLintConfigs(imports, resolvedImports = {}, eslintrc) {
  const eslintConfigs = { globals: {} };
  [
    ...Object.entries(imports),
    ...Object.entries(resolvedImports)
  ].sort((a, b) => a[0].localeCompare(b[0])).forEach(([name]) => {
    eslintConfigs.globals[name] = eslintrc.globalsPropValue || true;
  });
  const jsonBody = JSON.stringify(eslintConfigs, null, 2);
  return jsonBody;
}

// src/index.ts
var src_default = createUnplugin((options) => {
  let resolved = resolveOptions(options);
  if (!Object.keys(resolved.imports).length && !resolved.resolvers.length)
    console.warn("[auto-import] plugin installed but no imports has defined, see https://github.com/antfu/unplugin-auto-import#configurations for configurations");
  const generateConfigFiles = throttle(500, false, () => {
    if (resolved.dts)
      fs.writeFile(resolved.dts, generateDeclaration(resolved.imports, resolved.resolvedImports), "utf-8");
    const { eslintrc } = resolved;
    if (eslintrc.enabled && eslintrc.filepath)
      fs.writeFile(eslintrc.filepath, generateESLintConfigs(resolved.imports, resolved.resolvedImports, eslintrc), "utf-8");
  });
  return {
    name: "unplugin-auto-import",
    enforce: "post",
    transformInclude(id) {
      return resolved.idFilter(id);
    },
    async transform(code, id) {
      const res = await transform(code, id, resolved);
      if (res && resolved.resolvers.length)
        generateConfigFiles();
      return res;
    },
    vite: {
      configResolved(config) {
        resolved = resolveOptions(options, config.root);
        generateConfigFiles();
      }
    }
  };
});

export {
  src_default
};
